services:

    shelter-service-db:
        container_name: shelter-service-db
        image: postgres
        networks:
            - shared_network
        ports:
            - "5432:5432"
        environment:
            POSTGRES_PASSWORD: postgres
            POSTGRES_USER: postgres
            POSTGRES_DB: postgres
        volumes:
            - pgdata:/var/lib/postgresql/data

    shelter_service_1:
        container_name: shelter_service_1
        image: api-shelter
        build:
            context: ./
            dockerfile: Dockerfile
        networks:
            - shared_network
        depends_on:
            - shelter-service-db
        ports:
            - 8181:8080
        restart: always

    shelter_service_2:
        container_name: shelter_service_2
        image: api-shelter
        build:
            context: ./
            dockerfile: Dockerfile
        networks:
            - shared_network
        depends_on:
            - shelter-service-db
        ports:
            - 8282:8080
        restart: always

    nginx_server:
        container_name: nginx
        build:
            context: ./volumes/nginx
            dockerfile: Dockerfile
        ports:
            - 9070:9070
        depends_on:
            - shelter_service_1
            - shelter_service_2
        networks:
            - shared_network

    elasticsearch:
        image: elasticsearch:8.7.1
        container_name: elasticsearch
        volumes:
            - ./volumes/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
        ports:
            - "9200:9200"
            - "9300:9300"
        environment:
            ES_JAVA_OPTS: "-Xmx256m -Xms256m"
        networks:
            - shared_network

    logstash:
        image: logstash:8.7.1
        container_name: logstash
        command: -f /etc/logstash/conf.d/
        volumes:
            - ./volumes/logstash/:/etc/logstash/conf.d/
        ports:
            - "9999:9999"
        environment:
            LS_JAVA_OPTS: "-Xmx256m -Xms256m"
        depends_on:
            - elasticsearch
        networks:
            - shared_network

    kibana:
        image: kibana:8.7.1
        container_name: kibana
        volumes:
            - ./volumes/kibana/:/usr/share/kibana/config/
        ports:
            - "5601:5601"
        depends_on:
            - elasticsearch
        networks:
            - shared_network

    grafana:
        build: './volumes/grafana'
        ports:
            - 3000:3000
        volumes:
            - ./volumes/grafana:/var/lib/grafana
        environment:
            - GF_SECURITY_ADMIN_USER=admin
            - GF_SECURITY_ADMIN_PASSWORD=admin
        networks:
            shared_network:
                aliases:
                    - grafana

    prometheus:
        image: prom/prometheus
        ports:
            - 9090:9090
        volumes:
            - ./volumes/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
            - ./volumes/prometheus:/prometheus
        extra_hosts:
            - "host.docker.internal:host-gateway"
        networks:
            shared_network:
                aliases:
                    - prometheus

networks:
    shared_network:
        name: shared_network
        driver: bridge
        #attachable: true # Needed in order to run custom commands in the container

volumes:
    pgdata: {}

#volumes:
#    pg-data:
#        external: true # Must use "docker volume create --name=pg-data before
